Go Fundamentals
Language Syntax

Marcus Olsson
Data Engineer
Bonnier Broadcasting
@marcusolsson

* Variables

Declaring variables

.code variables/example1.go /START DECL OMIT/,/END DECL OMIT/

Initializing variables

.code variables/example1.go /START INIT OMIT/,/END INIT OMIT/

If not explicitly initialized, variables will be initialized to their respective _zero_ _value_.

.code variables/example1.go /START ZERO OMIT/,/END ZERO OMIT/

* Variables

Type will be inferred if none is defined

.code variables/example1.go /START INFER OMIT/,/END INFER OMIT/

Since this is so common, there's even a shorthand for it

.code variables/example1.go /START SHORT OMIT/,/END SHORT OMIT/

* Exercise

- Will this run? If not, why? How do we fix it?

.play variables/exercise1.go

- Try removing the `fmt.Println` line. Will it still run?

* Functions

.code functions/example1.go /^func hello/,/^}/

Arguments with same type can be written more concisely.

.code functions/example1.go /^func add/,/^}/

Multiple return values

.code functions/example1.go /^func swap/,/^}/

* Exercise

- Write a function that takes a first name and last name, and returns the full name

.code functions/exercise1.go

- Try switching place of the two functions. Does it matter if the function is defined before or after it's being used?

* If

No parentheses needed

.code if/example1.go /START IF OMIT/,/END IF OMIT/

Test multiple conditions with `else` `if` and `else`

.code if/example1.go /func review/,/^}/

* Loops

There is only one looping construct, the `for` loop
.code loops/example1.go /START FIRST OMIT/,/END FIRST OMIT/

that can also be used as a `while` loop
.code loops/example1.go /START SECOND OMIT/,/END SECOND OMIT/

Omit the condition and you have yourself an infinite loop
.code loops/example1.go /START THIRD OMIT/,/END THIRD OMIT/

* Exercise

- Write a function that loops ...

* Struct types

.code struct/example1.go /^type movie/,/^}/

Declaring `struct` variables
.code struct/example1.go /^var favoriteMovie/,/$/

Structs can be initialized using struct literals.
.code struct/example1.go /START INIT OMIT/,/END INIT OMIT/

Individual fields can be accessed using the dot (`.`) operator.
.code struct/example1.go /START GETSET OMIT/,/END GETSET OMIT/

* Methods

A method is a function with a defined _receiver_.

.code methods/example1.go /START METHOD OMIT/,/END METHOD OMIT/
.play methods/example1.go /^func main/,/^}/

* Exercise

- Write a struct `player` with two integer fields
- Implement a method that returns the player's war cry as a string

Example usage:
.play methods/exercise1.go /func main/,/^}/

* Methods

But what about _modifying_ the struct from its method?

.code methods/example2.go /rename/,/^}/
.play methods/example2.go /^func main/,/^}/

The `rename` method is being passed a _copy_ of the `user` struct.
This is not what we wanted.

* Pointers

A pointer is its own type

.code pointers/example1.go /START DECL OMIT/,/END DECL OMIT/

Ampersand (`&`) is used to fetch a pointer to an existing value.

.play pointers/example1.go /START REF OMIT/,/END REF OMIT/

Asterisk (`*`) is used to fetch the value a pointer points to.

.code pointers/example1.go /START DEREF OMIT/,/END DEREF OMIT/

* Methods (revisited)

We'll make the method receiver into a pointer instead.

.code methods/example3.go /rename/,/^}/
.play methods/example3.go /^func main/,/^}/

* Exercise

- Add a new field called `health` to your player struct
- Add a method `consumePotion` that restores full health to the player

Example usage:
.play methods/example4.go /^func main/,/^}/

* Interfaces

.code interfaces/example1.go /^type notifier/,/^}/

Interfaces in Go are implemented _implicitly_.

.code interfaces/example1.go /START IMPL OMIT/,/END IMPL OMIT/

* Interfaces

No dependency between interface and implementation

.code interfaces/example1.go /START EXAMPLE OMIT/,/END EXAMPLE OMIT/

* Arrays

Arrays are defined by its length and its type

.code slices/example1.go /func example1/,/^}/

Arrays can be declared and initialized at the same time

.code slices/example1.go /func example2/,/^}/

* Slices

Slices provide dynamic views into the elements of an array

.play slices/example2.go /func main/,/^}/

In practice, slices are more commonly used than arrays

* Slices

Use the built-in function `len()` to check the size of any slice or array

.play slices/example4.go /func main/,/^}/

* Exercise

- Write a `for` loop to iterate over a slice

* Slices

The `range` keyword can be used to loop over slices

.play slices/example3.go /func main/,/^}/

* Maps

Declaring a map

.code maps/example1.go /var customers/,/int/

Initialize a map using `make`

.code maps/example1.go /var customers/,/int/

or by using a literal

.code maps/example1.go /customers = map/,/}/

* Maps

Elements can be accessed using the `[]` operator
.code maps/example1.go /v := customers/,/]/

If key didn't exist, the zero value of that type will be returned

Check if element exists
.code maps/example1.go /v, ok/,/}/

You can check the length of a map using the `len()` function

* Packages

All `*.go` files within a directory is part of the same _package_ and must define the name of the package they belong to.

.code packages/example1.go /START HELLO OMIT/,/END HELLO OMIT/ HLpackage

* Packages

Packages need to be imported before they can be used.

.code packages/example1.go /START HELLO OMIT/,/END HELLO OMIT/ HLimport

Package name is used to reference functions within that package.

.code packages/example1.go /START HELLO OMIT/,/END HELLO OMIT/ HLuse

* Exporting

In order for other packages to use your function, it needs to be _exported_.

Functions (and other identifiers) are exported by uppercasing the first letter.

.code packages/example1.go /START EXPORT OMIT/,/END EXPORT OMIT/

In other words, `Hello` will be part of your package _API_.

* Exporting

Functions are not the only thing we can export.

.code packages/example1.go /START STRUCT OMIT/,/END STRUCT OMIT/

* Exercise

- Create a new subdirectory `calc`, with the file `add.go`
- In that file, create an exported function that returns the sum of two integers
- In `main.go`, call the function to print out the sum of any two numbers
